require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/wine_listings", type: :request do
  # creates test data with FactoryBot
  before(:each) do
    FactoryBot.create(:wine_listing, brand: "Test Brand 1",
                                     grape_variety: "Sauvignon Blanc",
                                     year: 2020,
                                     category: "White",
                                     country: "Australia",
                                     region: "Yarra Valley",
                                     description: "Very pale straw green, brilliant colour. Fresh and pure aromas of grapefruit, juniper, acacia and spice with complexing hints of toast and flint from barrel fermentation. Complex and textural style with a lovely weight. Superb balance.")
    FactoryBot.create(:wine_listing, brand: "Test Brand 2",
                                     grape_variety: "Cabernet Sauvignon",
                                     year: 2020,
                                     category: "Red",
                                     country: "Australia",
                                     region: "Barossa Valley",
                                     description: "Very bold and distinct characteristics typicsal of this grape variety.")
  end

  describe "should display all wine listings" do
    it "should return wine listings" do
      get "/wine_listings"
      expect(response).to have_http_status(:success)
      # tests wineListing size is equal to what is rendered
      expect(JSON.parse(response.body).size).to eq(2)
    end
  end

  describe "should display first wine listing at /wine_listings/:id" do
    it "should return the wine listings based on given param" do
      get "/wine_listings/1"
      expect(response).to have_http_status(:success)
      expect(response.body).to include("Test Brand 1")
    end

    it "should return a not found when the wrong param is used" do
      get "/wine_listings/35"
      expect(response).to have_http_status(:not_found)
      expect(response.body).to include("This wine listing cannot be located, reconfirm ID")
    end
  end

  # This should return the minimal set of attributes required to create a valid
  # WineListing. As you add validations to WineListing, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  # # This should return the minimal set of values that should be in the headers
  # # in order to pass any filters (e.g. authentication) defined in
  # # WineListingsController, or in your router and rack
  # # middleware. Be sure to keep this updated too.
  # let(:valid_headers) {
  #   {}
  # }

  # describe "GET /index" do
  #   it "renders a successful response" do
  #     WineListing.create! valid_attributes
  #     get wine_listings_url, headers: valid_headers, as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /show" do
  #   it "renders a successful response" do
  #     wine_listing = WineListing.create! valid_attributes
  #     get wine_listing_url(wine_listing), as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe "POST /create" do
  #   context "with valid parameters" do
  #     it "creates a new WineListing" do
  #       expect {
  #         post wine_listings_url,
  #              params: { wine_listing: valid_attributes }, headers: valid_headers, as: :json
  #       }.to change(WineListing, :count).by(1)
  #     end

  #     it "renders a JSON response with the new wine_listing" do
  #       post wine_listings_url,
  #            params: { wine_listing: valid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:created)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "does not create a new WineListing" do
  #       expect {
  #         post wine_listings_url,
  #              params: { wine_listing: invalid_attributes }, as: :json
  #       }.to change(WineListing, :count).by(0)
  #     end

  #     it "renders a JSON response with errors for the new wine_listing" do
  #       post wine_listings_url,
  #            params: { wine_listing: invalid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end
  # end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested wine_listing" do
  #       wine_listing = WineListing.create! valid_attributes
  #       patch wine_listing_url(wine_listing),
  #             params: { wine_listing: new_attributes }, headers: valid_headers, as: :json
  #       wine_listing.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "renders a JSON response with the wine_listing" do
  #       wine_listing = WineListing.create! valid_attributes
  #       patch wine_listing_url(wine_listing),
  #             params: { wine_listing: new_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:ok)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a JSON response with errors for the wine_listing" do
  #       wine_listing = WineListing.create! valid_attributes
  #       patch wine_listing_url(wine_listing),
  #             params: { wine_listing: invalid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end
  # end

  # describe "DELETE /destroy" do
  #   it "destroys the requested wine_listing" do
  #     wine_listing = WineListing.create! valid_attributes
  #     expect {
  #       delete wine_listing_url(wine_listing), headers: valid_headers, as: :json
  #     }.to change(WineListing, :count).by(-1)
  #   end
  # end
end
